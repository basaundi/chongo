// Generated by CoffeeScript 1.6.3
(function() {
  describe("Connection", function() {
    var con;
    con = null;
    beforeEach(function() {
      sessionStorage.clear();
      return con = new Pongo.Connection(sessionStorage);
    });
    it("should be able to retrieve databases", function() {
      var db;
      db = con.db('mydb');
      return expect(db.constructor).toEqual(Pongo.Database);
    });
    return describe("Database", function() {
      var db;
      db = null;
      beforeEach(function() {
        sessionStorage.clear();
        return db = con.db('mydb');
      });
      it("should be able to retrieve collections", function() {
        var col;
        expect(db.col).toBeDefined();
        col = db.col('mycol');
        col.insert({
          x: 9
        });
        return expect(col.count()).toEqual(1);
      });
      return describe("Collection", function() {
        var col, docs;
        col = null;
        docs = [
          {
            'username': 'root',
            'password': 'toor',
            'super': true,
            'uid': 0
          }, {
            'username': 'bill',
            'password': '1234',
            'shell': 'bash',
            'uid': 1004
          }, {
            'foo': -9
          }
        ];
        beforeEach(function() {
          sessionStorage.clear();
          return col = db.col('mycol');
        });
        it("can do basic CRUD operations", function() {
          var cur;
          expect(col).toBeDefined();
          expect(col.count()).toEqual(0);
          col.insert(docs[0]);
          expect(col.count()).toEqual(1);
          col.insert(docs[1]);
          col.insert(docs[2]);
          expect(col.count()).toEqual(3);
          cur = col.find();
          expect(cur.next().username).toEqual('root');
          expect(cur.next().shell).toEqual('bash');
          col.update({}, {
            'shell': 'zsh'
          });
          cur = col.find();
          expect(cur.next().shell).toEqual('zsh');
          col.remove({});
          return expect(col.count()).toEqual(0);
        });
        it("can do batch insert", function() {
          var cur;
          col.insert(docs);
          expect(col.count()).toEqual(3);
          cur = col.find();
          expect(cur.next().username).toEqual('root');
          return expect(cur.next().shell).toEqual('bash');
        });
        it("can query", function() {
          var cur;
          col.insert(docs);
          cur = col.find({
            username: 'bill'
          });
          expect(cur.next().shell).toEqual('bash');
          cur = col.find({
            uid: {
              $gt: 100
            }
          });
          return expect(cur.next().uid).toEqual(1004);
        });
        it("can load array", function() {
          var arr, cur;
          col.insert(docs);
          cur = col.find();
          arr = cur.toArray();
          return expect(arr.length).toEqual(3);
        });
        return it("stores _id properly", function() {
          var o;
          col.insert(docs);
          o = col.find().next();
          expect(typeof o._id).toEqual("string");
          return expect(o._id.length).toEqual(24);
        });
      });
    });
  });

  describe("Query", function() {
    var a, b, c, d, e;
    a = b = c = d = e = null;
    beforeEach(function() {
      a = {
        'x': 'y',
        'foo': 9,
        'bar': "xxx",
        'ding': [2, 4, 8],
        'dong': -10,
        'bang': {
          'foo': 8
        }
      };
      b = {
        'x': 'y',
        'foo': 0,
        'bar': "yyy",
        'ding': [1, 3, 5, 7],
        'bang': {
          'foo': 0,
          'lst': [1, 2, 3]
        }
      };
      c = {
        'x': 'y',
        'foo': 1,
        'bar': "zzzz",
        'ding': [1, 3, 5, 7],
        'bang': {
          'foo': 8,
          'lst': [1, 2, 3]
        }
      };
      d = {
        'type': 'food',
        qty: 354,
        price: 5.95
      };
      return e = {
        'type': 'food',
        qty: 254,
        price: 10.32
      };
    });
    it("empty", function() {
      var m;
      m = Pongo.Query({});
      expect(m(a)).toBe(true);
      expect(m(b)).toBe(true);
      expect(m(c)).toBe(true);
      m = Pongo.Query();
      expect(m(a)).toBe(true);
      expect(m(b)).toBe(true);
      return expect(m(c)).toBe(true);
    });
    it("scalar equality", function() {
      var m;
      m = Pongo.Query({
        'foo': 9
      });
      expect(m(a)).toBe(true);
      expect(m(b)).toBe(false);
      return expect(m(b)).toBe(false);
    });
    it("perform compound queries", function() {
      var m;
      m = Pongo.Query({
        'x': 'y',
        'foo': 0
      });
      expect(m(a)).toBe(false);
      expect(m(b)).toBe(true);
      return expect(m(c)).toBe(false);
    });
    it("in arrays", function() {
      var m;
      m = Pongo.Query({
        'ding': 4
      });
      expect(m(a)).toBe(true);
      expect(m(b)).toBe(false);
      expect(m(c)).toBe(false);
      m = Pongo.Query({
        'ding.1': 3
      });
      expect(m(a)).toBe(false);
      expect(m(b)).toBe(true);
      return expect(m(c)).toBe(true);
    });
    it("documents", function() {
      var m;
      m = Pongo.Query({
        'bang': {
          'foo': 8
        }
      });
      expect(m(a)).toBe(true);
      expect(m(b)).toBe(false);
      return expect(m(c)).toBe(false);
    });
    it("in nested documents", function() {
      var m;
      m = Pongo.Query({
        'bang.foo': 8
      });
      expect(m(a)).toBe(true);
      expect(m(b)).toBe(false);
      return expect(m(c)).toBe(true);
    });
    it("works with $in operator", function() {
      var m;
      m = Pongo.Query({
        'bar': {
          '$in': ['xxx', 'zzzz']
        }
      });
      expect(m(a)).toBe(true);
      expect(m(b)).toBe(false);
      return expect(m(c)).toBe(true);
    });
    it("works with $or operator", function() {
      var m;
      m = Pongo.Query({
        '$or': [
          {
            'bar': 'xxx'
          }, {
            'bar': 'zzzz'
          }
        ]
      });
      expect(m(a)).toBe(true);
      expect(m(b)).toBe(false);
      return expect(m(c)).toBe(true);
    });
    return it("works with comlex queries", function() {
      var m;
      m = Pongo.Query({
        type: 'food',
        $or: [
          {
            qty: {
              $gt: 100
            }
          }, {
            price: {
              $lt: 9.95
            }
          }
        ]
      });
      expect(m(a)).toBe(false);
      expect(m(b)).toBe(false);
      expect(m(c)).toBe(false);
      expect(m(d)).toBe(true);
      expect(m(e)).toBe(true);
      m = Pongo.Query({
        type: 'food',
        $and: [
          {
            qty: {
              $gt: 100
            }
          }, {
            price: {
              $lt: 9.95
            }
          }
        ]
      });
      expect(m(a)).toBe(false);
      expect(m(b)).toBe(false);
      expect(m(c)).toBe(false);
      expect(m(d)).toBe(true);
      return expect(m(e)).toBe(false);
    });
  });

}).call(this);
