// Generated by CoffeeScript 1.6.3
(function() {
  var Collection, Compare, Connection, Cursor, Database, Document, Namespace, ObjectId, Pongo, Query, Update, dotDel, dotGet, dotSet, k, s1, s2, u1, v, _ref, _ref1, _ref2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  dotGet = function(d, k) {
    var s, x, _i, _len, _ref;
    x = d;
    _ref = k.split('.');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      if (x != null) {
        x = x[s];
      }
    }
    return x;
  };

  dotSet = function(d, k, v) {
    var p, s, x, _i, _len, _ref;
    x = d;
    _ref = k.split('.');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      if (x[s] == null) {
        x[s] = {};
      }
      p = x;
      x = x[s];
    }
    return p[s] = v;
  };

  dotDel = function(d, k) {
    var p, s, x, _i, _len, _ref;
    x = d;
    _ref = k.split('.');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      if (x[s] == null) {
        x[s] = {};
      }
      p = x;
      x = x[s];
    }
    return delete p[s];
  };

  s1 = {};

  s2 = {
    $gt: function(v, q) {
      return v > q;
    },
    $gte: function(v, q) {
      return v >= q;
    },
    $in: function(v, q) {
      return __indexOf.call(q, v) >= 0;
    },
    $lt: function(v, q) {
      return v < q;
    },
    $lte: function(v, q) {
      return v <= q;
    },
    $ne: function(v, q) {
      return v !== q;
    },
    $nin: function(v, q) {
      return __indexOf.call(q, v) < 0;
    },
    $all: function(v, q) {
      var x, _i, _len;
      for (_i = 0, _len = v.length; _i < _len; _i++) {
        x = v[_i];
        if (__indexOf.call(q, x) < 0) {
          return false;
        }
      }
      return true;
    },
    $exists: function(v, q) {
      return (v != null) === q;
    },
    $mod: function(v, q) {
      return (v % q[0]) === q[1];
    },
    $size: function(v, q) {
      return v.length === q;
    },
    $elemMatch: function(v, q) {
      var x, _i, _len;
      for (_i = 0, _len = v.length; _i < _len; _i++) {
        x = v[_i];
        if (s1.$m(x, q)) {
          return true;
        }
      }
      return false;
    },
    $m: function(v, q) {
      var op, qv;
      for (op in q) {
        qv = q[op];
        if (!this[op](v, qv)) {
          return false;
        }
      }
      return true;
    }
  };

  _ref = {
    $or: function(v, q) {
      var xq, _i, _len;
      for (_i = 0, _len = q.length; _i < _len; _i++) {
        xq = q[_i];
        if (this.$m(v, xq)) {
          return true;
        }
      }
      return false;
    },
    $and: function(v, q) {
      var xq, _i, _len;
      for (_i = 0, _len = q.length; _i < _len; _i++) {
        xq = q[_i];
        if (!this.$m(v, xq)) {
          return false;
        }
      }
      return true;
    },
    $not: function(v, q) {
      return !this.$m(v, q);
    },
    $nor: function(v, q) {
      var xq, _i, _len;
      for (_i = 0, _len = q.length; _i < _len; _i++) {
        xq = q[_i];
        if (this.$m(v, xq)) {
          return false;
        }
      }
      return true;
    },
    $m: function(d, q) {
      var m, x;
      for (k in q) {
        v = q[k];
        if (k in this) {
          m = this[k](d, v);
        } else {
          x = dotGet(d, k);
          if (v instanceof RegExp) {
            m = v.test(x);
          } else if (v instanceof Object) {
            if (Object.keys(v)[0][0] === '$') {
              m = s2.$m(x, v);
            } else {
              m = JSON.stringify(v) === JSON.stringify(x);
            }
          } else if (Array.isArray(x)) {
            m = __indexOf.call(x, v) >= 0;
          } else {
            m = x === v;
          }
        }
        if (!m) {
          return false;
        }
      }
      return true;
    }
  };
  for (k in _ref) {
    v = _ref[k];
    s1[k] = v;
  }

  Query = function(q) {
    return function(d) {
      return s1.$m(d, q);
    };
  };

  Compare = function(c) {
    return function(a, b) {
      var mod;
      for (k in c) {
        v = c[k];
        mod = v < 0 ? -1 : 1;
        if (a[k] < b[k]) {
          return -1 * mod;
        }
        if (a[k] > b[k]) {
          return 1 * mod;
        }
      }
      return 0;
    };
  };

  u1 = {
    $inc: function(d, k, upd) {
      return dotSet(d, k, upd + dotGet(d, k));
    },
    $rename: function(d, k, upd) {
      dotSet(d, upd, dotGet(d, k));
      return dotDel(d, k);
    },
    $setOnInsert: function(d, k, upd, insert) {
      if (!insert) {
        return;
      }
      return dotSet(d, k, upd);
    },
    $set: function(d, k, upd) {
      return dotSet(d, k, upd);
    },
    $unset: function(d, k, upd) {
      return dotDel(d, k);
    },
    $addToSet: function(d, k, upd) {
      var l, x, _i, _len, _ref1, _results;
      l = dotGet(d, k);
      if (upd.$each != null) {
        _ref1 = upd.$each;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          x = _ref1[_i];
          if (__indexOf.call(l, upd) < 0) {
            _results.push(l.push(x));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } else {
        if (__indexOf.call(l, upd) < 0) {
          return l.push(upd);
        }
      }
    },
    $pop: function(d, k, upd) {
      var l;
      l = dotGet(d, k);
      if (upd < 0) {
        return l.shift();
      } else {
        return l.pop();
      }
    },
    $pullAll: function(d, k, upd) {
      var i, l, _i, _ref1, _ref2, _results;
      l = dotGet(d, k);
      _results = [];
      for (i = _i = 0, _ref1 = l.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        if (_ref2 = l[i], __indexOf.call(upd, _ref2) >= 0) {
          l.splice(i, 1);
          _results.push(i -= 1);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    $pull: function(d, k, upd) {
      var i, l, q, _i, _ref1, _results;
      l = dotGet(d, k);
      q = Query(upd);
      _results = [];
      for (i = _i = 0, _ref1 = l.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        if (q(l[i])) {
          l.splice(i, 1);
          _results.push(i -= 1);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    $push: function(d, k, upd) {
      var c, l, x, _i, _len, _ref1;
      l = dotGet(d, k);
      if (upd.$each != null) {
        _ref1 = upd.$each;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          x = _ref1[_i];
          l.push(x);
        }
        if (upd.$sort != null) {
          c = Compare(upd.$sort);
          l.sort(c);
        }
        return l.splice($upd.$slice, l.length);
      } else {
        return l.push(upd);
      }
    }
  };

  Update = function(op, update, data) {
    var _results;
    _results = [];
    for (k in update) {
      v = update[k];
      _results.push(u1[op](data, k, v, false));
    }
    return _results;
  };

  ObjectId = (function() {
    ObjectId.inc = ~~(Math.random() * 0xFFFFFF);

    ObjectId.hostname = ObjectId.inc;

    ObjectId.pid = ~~(Math.random() * 0xFFFFFF);

    ObjectId.getInc = function() {
      v = this.inc;
      this.inc = (this.inc + 1) % 0xFFFFFF;
      return v;
    };

    function ObjectId(hex) {
      if (hex == null) {
        hex = null;
      }
      if (hex != null) {
        this.v = hex;
      } else {
        this.v = this.constructor.generate();
      }
    }

    ObjectId.generate = function() {
      v = this._pad("00000000", ~~((new Date).getTime() / 1000));
      v += this._pad("000000", this.hostname);
      v += this._pad("0000", this.pid);
      v += this._pad("000000", this.getInc());
      return v;
    };

    ObjectId.prototype.toString = function() {
      return 'ObjectId("#{@v}")';
    };

    ObjectId.prototype.valueOf = function() {
      return this.v;
    };

    ObjectId._pad = function(f, v) {
      var t;
      t = v.toString(16);
      return (f + t).substring(t.length);
    };

    return ObjectId;

  })();

  Cursor = (function() {
    function Cursor(col, index, query) {
      this.col = col;
      this.index = index;
      this.query = query;
      this.doc = null;
      this.started = false;
      this.done = false;
      this.i = 0;
      this.n = 0;
    }

    Cursor.prototype.load = function() {
      this.started = true;
      return this.match = Query(this.query);
    };

    Cursor.prototype.fetch = function() {
      var oid;
      if (!this.started) {
        this.load();
      }
      this.doc = null;
      while (!((this.doc != null) || this.i >= this.index.length)) {
        oid = this.index[this.i++];
        this.doc = new Document(this.col, oid);
        if (!this.match(this.doc.data)) {
          this.doc = null;
        }
      }
      if (this.doc != null) {
        ++this.n;
      } else {
        this.done = true;
      }
      return this.doc;
    };

    Cursor.prototype.pop = function() {
      var doc;
      if (this.doc == null) {
        return null;
      }
      this.index.splice(--this.i, 1);
      doc = this.doc;
      this.doc = null;
      return doc;
    };

    Cursor.prototype.hasNext = function() {
      if (this.doc != null) {
        return true;
      }
      if (this.done) {
        return false;
      }
      this.fetch();
      return !this.done;
    };

    Cursor.prototype.next = function() {
      var doc;
      if (this.doc == null) {
        this.fetch();
      }
      if (this.doc == null) {
        throw new Error("No more data.");
      }
      doc = this.doc.data;
      this.doc = null;
      return doc;
    };

    Cursor.prototype.toArray = function() {
      var a;
      a = [];
      while (this.hasNext()) {
        a.push(this.next());
      }
      return a;
    };

    Cursor.prototype.count = function() {
      var n;
      n = 0;
      while (this.hasNext()) {
        n++;
        this.next();
      }
      return n;
    };

    Cursor.prototype.update = function(update) {
      var ks, oid;
      if (this.doc == null) {
        throw TypeError();
      }
      oid = this.doc._id;
      ks = Object.keys(update);
      if ((ks[0] != null) && ks[0][0] !== '$') {
        this.doc.data = {};
        for (k in update) {
          v = update[k];
          this.doc.data[k] = v;
        }
      } else {
        for (k in update) {
          v = update[k];
          Update(k, v, this.doc.data);
        }
      }
      this.doc.data._id = oid;
      return this.doc.store();
    };

    return Cursor;

  })();

  Namespace = (function() {
    function Namespace(con, _id, data) {
      this.con = con;
      this._id = _id;
      this.data = data;
      this.ns = '.';
      if (this.data == null) {
        this.load();
      }
    }

    Namespace.prototype.load = function() {
      return this.data = this.get('') || {
        'sub': []
      };
    };

    Namespace.prototype.store = function() {
      return this.set('', this.data);
    };

    Namespace.prototype.destroy = function() {
      return this.del('');
    };

    Namespace.prototype.get = function(reg) {
      return this.con.get(this.ns + this._id + reg);
    };

    Namespace.prototype.set = function(reg, v) {
      return this.con.set(this.ns + this._id + reg, v);
    };

    Namespace.prototype.del = function(reg) {
      return this.con.del(this.ns + this._id + reg);
    };

    return Namespace;

  })();

  Document = (function(_super) {
    __extends(Document, _super);

    function Document(con, _id, data) {
      this.con = con;
      this._id = _id;
      this.data = data;
      this.ns = '.$$';
      if (this.data == null) {
        this.load();
      }
    }

    return Document;

  })(Namespace);

  Collection = (function(_super) {
    __extends(Collection, _super);

    function Collection() {
      _ref1 = Collection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Collection.prototype.find = function(query) {
      return new Cursor(this, this.data.sub, query);
    };

    Collection.prototype.findOne = function(query) {
      var cur;
      cur = new Cursor(this, this.data.sub, query);
      return cur.next();
    };

    Collection.prototype.count = function(query) {
      return this.find(query).count();
    };

    Collection.prototype.insert = function(doc) {
      var d, res, _i, _len;
      if (Array.isArray(doc)) {
        for (_i = 0, _len = doc.length; _i < _len; _i++) {
          d = doc[_i];
          res = this.insert(d);
        }
        return res;
      }
      if (doc._id == null) {
        doc._id = new ObjectId().valueOf();
      }
      doc = new Document(this, doc._id, doc);
      doc.store();
      this.data.sub.push(doc._id.valueOf());
      this.store();
      return doc._id;
    };

    Collection.prototype.update = function(spec, new_doc, options) {
      var cur;
      if (options == null) {
        options = null;
      }
      cur = this.find(spec);
      if ((options != null) && options.multi) {
        while (cur.hasNext()) {
          cur.update(new_doc);
          cur.fetch();
        }
      } else {
        cur.fetch();
        cur.update(new_doc);
      }
      return this.store();
    };

    Collection.prototype.remove = function(spec) {
      var cur, doc;
      cur = this.find(spec);
      while (cur.hasNext()) {
        doc = cur.pop();
        doc.destroy();
      }
      return this.store();
    };

    Collection.prototype.count = function() {
      return this.data.sub.length;
    };

    return Collection;

  })(Namespace);

  Database = (function(_super) {
    __extends(Database, _super);

    function Database() {
      _ref2 = Database.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Database.prototype.col = function(col) {
      return new Collection(this, col);
    };

    return Database;

  })(Namespace);

  Connection = (function() {
    function Connection(store) {
      this.store = store;
      this.ns = '$';
      this.data = this.get('.local.system.pongo');
      if (this.data == null) {
        this.data = {};
        this.data.hostname = ObjectId.hostname;
        this.set('.local.system.pongo', this.data);
      }
    }

    Connection.prototype.db = function(db) {
      return new Database(this, db);
    };

    Connection.prototype.get = function(reg) {
      console.log('Getting registry ', reg);
      v = this.store.getItem(this.ns + reg);
      return v && JSON.parse(v);
    };

    Connection.prototype.set = function(reg, v) {
      console.log('Setting registry ', reg, ' to value ', v);
      return this.store.setItem(this.ns + reg, JSON.stringify(v));
    };

    Connection.prototype.del = function(reg) {
      return this.store.removeItem(this.ns + reg);
    };

    return Connection;

  })();

  Pongo = this.Pongo = {
    'Connection': Connection,
    'Database': Database,
    'Collection': Collection,
    'Update': Update,
    'Query': Query
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Pongo;
  }

}).call(this);
